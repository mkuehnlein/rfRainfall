################################################################################
##  
##  This program 
##  1. trains a random forest model and
##  2. predicts rainfall rates using the created model
##
################################################################################
##
##  Copyright (C) 2013 Meike Kuehnlein
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
##  Please send any comments, suggestions, criticism, or (for our sake) bug
##  reports to meike.kuehnlein@staff.uni-marburg.de
##
################################################################################

# Clear workspace
rm(list=ls(all=TRUE))

## SET WORKING DIRECTORY
path.wd <- ("/home/mkuehnlein/randomForest/rf_regression/")
setwd(path.wd)

path.out <- "/home/mkuehnlein/randomForest/rf_regression/results/.../"
path.dat <- "/home/mkuehnlein/randomForest/rf_input/.../"


## LOAD LIBRARIES
library(raster)
library(latticeExtra)
library(randomForest)
library(foreach)
library(doSNOW)
library(parallel)


## set version
v <- "v01"

###########################################################################################
### train random forests and predict rainfall rates for stratiform clouds

outpath <- paste(paste(path.out,v[i],sep=""),"/rainS/",sep="")
dir.create(outpath, recursive = TRUE, showWarnings = FALSE)
dir.create(paste(outpath,"rain_predicted/", sep = ""), recursive = FALSE, showWarnings = TRUE)
dir.create(paste(outpath,"rain_radolan/", sep = ""), recursive = FALSE, showWarnings = TRUE)
 

# read input/train data
filename <- paste(paste(paste(path.dat, "trainRainS_",sep=""),v[i], sep=""),".dat",sep="")
trainData <- read.table(filename, 
                    header=T, 
                    row.names=NULL, 
                    na.strings="-99.000000")
 
 
unique(trainData$chDate)
nrow(trainData)
 

## train random forests

set.seed(41)
## Parallel execution of randomForest via package 'foreach'
 
## Number of cores
n.cores <- detectCores() 
 
## Register SNOW parallel backend with 'foreach' package
registerDoSNOW(makeCluster(n.cores, type="SOCK"))
 
## Define desired parameters
n.tree <- 500
m.try <- 8
 
## Parallel execution of randomForest
system.time(train.rf <- foreach(ntree=rep(ceiling(n.tree/n.cores), n.cores), .combine=combine, .packages="randomForest") %dopar%
   randomForest(trainData[,5:ncol(trainData)-1], 
 	       trainData[ , names(trainData) %in% c("Rain")], 
 	       ntree=ntree, 
 	       mtry=m.try, 
 	       importance=TRUE, 
 	       do.trace = FALSE))

#rm(trainData)


## prediction of rainfall rates
## read test data
filename <- paste(paste(paste(path.dat,"testRainS_",sep=""),v[i], sep=""),".dat",sep="")
testData <- read.table(filename, 
                    header=T, 
                    row.names=NULL, 
                    na.strings="-99.000000")

unique(testData$chDate)

##  predict rainfall rates for new data set
test.predict <- predict(train.rf, testData[,1:ncol(testData)])

## writing prediction 
## convert factor to array 
Rain.predict <- test.predict
result <- cbind(testData,Rain.predict)
names(result)

## write 
write.table(cbind(result$chDate,result$x,result$y,result$Rain,result$Rain.predict), 
file=paste(outpath,"prediction.dat", sep = "/"),
row.names = FALSE,
col.names = FALSE,
append = FALSE)

## copy Rout
file.copy("rf_rainDay_prediction.Rout", outpath, copy.mode = TRUE)


###############################################################################################
### train random forests and predict rainfall rates for convective clouds

outpath <- paste(paste(path.out,v[i],sep=""),"/rainC/",sep="")
dir.create(outpath, recursive = TRUE, showWarnings = FALSE)
dir.create(paste(outpath,"rain_predicted/", sep = ""), recursive = FALSE, showWarnings = TRUE)
dir.create(paste(outpath,"rain_radolan/", sep = ""), recursive = FALSE, showWarnings = TRUE)
 

## read input/train data
filename <- paste(paste(paste(path.dat, "trainRainC_",sep=""),v[i], sep=""),".dat",sep="")
trainData <- read.table(filename, 
                    header=T, 
                    row.names=NULL, 
                    na.strings="-99.000000")
 
 
unique(trainData$chDate)
nrow(trainData)
 

## train random forest

set.seed(41)
## Parallel execution of randomForest via package 'foreach'
 
## Number of cores
n.cores <- detectCores() 
 
## Register SNOW parallel backend with 'foreach' package
registerDoSNOW(makeCluster(n.cores, type="SOCK"))
 
## Define desired parameters
n.tree <- 500
m.try <- 7
 
## Parallel execution of randomForest
system.time(train.rf <- foreach(ntree=rep(ceiling(n.tree/n.cores), n.cores), .combine=combine, .packages="randomForest") %dopar%
   randomForest(trainData[,5:ncol(trainData)-1], 
 	       trainData[ , names(trainData) %in% c("Rain")], 
 	       ntree=ntree, 
 	       mtry=m.try, 
 	       importance=TRUE, 
 	       do.trace = FALSE))

#rm(trainData)


## prediction of rainfall rates
## read test data
filename <- paste(paste(paste(path.dat,"testRainC_",sep=""),v[i], sep=""),".dat",sep="")
testData <- read.table(filename, 
                    header=T, 
                    row.names=NULL, 
                    na.strings="-99.000000")

unique(testData$chDate)

##  predict rainfall rates for test data set
test.predict <- predict(train.rf, testData[,1:ncol(testData)])

## writing prediction 
## convert factor to array  
Rain.predict <- test.predict
result <- cbind(testData,Rain.predict)
names(result)

# write 
write.table(cbind(result$chDate,result$x,result$y,result$Rain,result$Rain.predict), 
file=paste(outpath,"prediction.dat", sep = "/"),
row.names = FALSE,
col.names = FALSE,
append = FALSE)


## copy and remove Rout
file.copy("rf_rainDay_prediction.Rout", outpath, copy.mode = TRUE)
file.remove("rf_rainDay_prediction.Rout")
